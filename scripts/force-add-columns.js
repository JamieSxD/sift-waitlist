require('dotenv').config();
const sequelize = require('../config/database');

async function forceAddColumns() {
  try {
    console.log('üîß Force adding database columns...');

    await sequelize.authenticate();
    console.log('‚úÖ Database connected');

    // Add columns to NewsletterSources
    try {
      await sequelize.query(`
        ALTER TABLE "NewsletterSources"
        ADD COLUMN "subscriptionType" VARCHAR(255) DEFAULT 'individual'
      `);
      console.log('‚úÖ Added subscriptionType to NewsletterSources');
    } catch (error) {
      if (error.message.includes('already exists')) {
        console.log('‚è≠Ô∏è subscriptionType already exists');
      } else {
        console.error('‚ùå Error adding subscriptionType:', error.message);
      }
    }

    try {
      await sequelize.query(`
        ALTER TABLE "NewsletterSources"
        ADD COLUMN "isSharedActive" BOOLEAN DEFAULT false
      `);
      console.log('‚úÖ Added isSharedActive to NewsletterSources');
    } catch (error) {
      if (error.message.includes('already exists')) {
        console.log('‚è≠Ô∏è isSharedActive already exists');
      } else {
        console.error('‚ùå Error adding isSharedActive:', error.message);
      }
    }

    // Add column to UserNewsletterSubscriptions
    try {
      await sequelize.query(`
        ALTER TABLE "UserNewsletterSubscriptions"
        ADD COLUMN "subscriptionMethod" VARCHAR(255) DEFAULT 'individual_forwarding'
      `);
      console.log('‚úÖ Added subscriptionMethod to UserNewsletterSubscriptions');
    } catch (error) {
      if (error.message.includes('already exists')) {
        console.log('‚è≠Ô∏è subscriptionMethod already exists');
      } else {
        console.error('‚ùå Error adding subscriptionMethod:', error.message);
      }
    }

    // Add columns to NewsletterContents
    try {
      await sequelize.query(`
        ALTER TABLE "NewsletterContents"
        ADD COLUMN "contentType" VARCHAR(255) DEFAULT 'individual'
      `);
      console.log('‚úÖ Added contentType to NewsletterContents');
    } catch (error) {
      if (error.message.includes('already exists')) {
        console.log('‚è≠Ô∏è contentType already exists');
      } else {
        console.error('‚ùå Error adding contentType:', error.message);
      }
    }

    try {
      await sequelize.query(`
        ALTER TABLE "NewsletterContents"
        ADD COLUMN "userId" UUID REFERENCES "Users"("id")
      `);
      console.log('‚úÖ Added userId to NewsletterContents');
    } catch (error) {
      if (error.message.includes('already exists')) {
        console.log('‚è≠Ô∏è userId already exists');
      } else {
        console.error('‚ùå Error adding userId:', error.message);
      }
    }

    console.log('üéâ All columns added successfully!');

  } catch (error) {
    console.error('‚ùå Error:', error);
  } finally {
    await sequelize.close();
  }
}

forceAddColumns();